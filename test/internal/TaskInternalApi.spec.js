/*
 * SeminarCatalog API
 * Rest API for SeminarCatalog Administration
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@databay.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SeminarCatalogApi);
  }
}(this, function(expect, SeminarCatalogApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SeminarCatalogApi.TaskInternalApi();
  });

  describe('(package)', function() {
    describe('TaskInternalApi', function() {
      describe('taskCreate', function() {
        it('should call taskCreate successfully', function(done) {
          // TODO: uncomment taskCreate call and complete the assertions
          /*

          instance.taskCreate().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SeminarCatalogApi.Task);
            expect(data.title).to.be.a('string');
            // expect(data.title).to.be("");
            expect(data.description).to.be.a('string');
            // expect(data.description).to.be("");
            expect(data.status).to.be.a('number');
            // expect(data.status).to.be(0);
            expect(data.notes).to.be.a('string');
            // expect(data.notes).to.be("");
            expect(data.changes).to.be.a('string');
            // expect(data.changes).to.be("");
            expect(data.dueDate).to.be.a('number');
            // expect(data.dueDate).to.be(0);
            expect(data.firstReminderStatus).to.be.a('number');
            // expect(data.firstReminderStatus).to.be(0);
            {
              let dataCtr = data.syncFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be(0);
            expect(data.foreignId).to.be.a('string');
            // expect(data.foreignId).to.be("");
            expect(data.language).to.be.a('number');
            // expect(data.language).to.be(0);
            expect(data.createDate).to.be.a('number');
            // expect(data.createDate).to.be(0);
            expect(data.changeDate).to.be.a('number');
            // expect(data.changeDate).to.be(0);
            expect(data.deleted).to.be.a('number');
            // expect(data.deleted).to.be(0);
            expect(data.hidden).to.be.a('number');
            // expect(data.hidden).to.be(0);
            expect(data.sorting).to.be.a('number');
            // expect(data.sorting).to.be(0);
            expect(data.tags).to.be.a('string');
            // expect(data.tags).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('taskDelete', function() {
        it('should call taskDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for taskDelete call and complete the assertions
          /*
          var id = 56;

          instance.taskDelete(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SeminarCatalogApi.Task);
            expect(data.title).to.be.a('string');
            // expect(data.title).to.be("");
            expect(data.description).to.be.a('string');
            // expect(data.description).to.be("");
            expect(data.status).to.be.a('number');
            // expect(data.status).to.be(0);
            expect(data.notes).to.be.a('string');
            // expect(data.notes).to.be("");
            expect(data.changes).to.be.a('string');
            // expect(data.changes).to.be("");
            expect(data.dueDate).to.be.a('number');
            // expect(data.dueDate).to.be(0);
            expect(data.firstReminderStatus).to.be.a('number');
            // expect(data.firstReminderStatus).to.be(0);
            {
              let dataCtr = data.syncFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be(0);
            expect(data.foreignId).to.be.a('string');
            // expect(data.foreignId).to.be("");
            expect(data.language).to.be.a('number');
            // expect(data.language).to.be(0);
            expect(data.createDate).to.be.a('number');
            // expect(data.createDate).to.be(0);
            expect(data.changeDate).to.be.a('number');
            // expect(data.changeDate).to.be(0);
            expect(data.deleted).to.be.a('number');
            // expect(data.deleted).to.be(0);
            expect(data.hidden).to.be.a('number');
            // expect(data.hidden).to.be(0);
            expect(data.sorting).to.be.a('number');
            // expect(data.sorting).to.be(0);
            expect(data.tags).to.be.a('string');
            // expect(data.tags).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('taskGet', function() {
        it('should call taskGet successfully', function(done) {
          // TODO: uncomment, update parameter values for taskGet call and complete the assertions
          /*
          var id = 56;

          instance.taskGet(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SeminarCatalogApi.Task);
            expect(data.title).to.be.a('string');
            // expect(data.title).to.be("");
            expect(data.description).to.be.a('string');
            // expect(data.description).to.be("");
            expect(data.status).to.be.a('number');
            // expect(data.status).to.be(0);
            expect(data.notes).to.be.a('string');
            // expect(data.notes).to.be("");
            expect(data.changes).to.be.a('string');
            // expect(data.changes).to.be("");
            expect(data.dueDate).to.be.a('number');
            // expect(data.dueDate).to.be(0);
            expect(data.firstReminderStatus).to.be.a('number');
            // expect(data.firstReminderStatus).to.be(0);
            {
              let dataCtr = data.syncFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be(0);
            expect(data.foreignId).to.be.a('string');
            // expect(data.foreignId).to.be("");
            expect(data.language).to.be.a('number');
            // expect(data.language).to.be(0);
            expect(data.createDate).to.be.a('number');
            // expect(data.createDate).to.be(0);
            expect(data.changeDate).to.be.a('number');
            // expect(data.changeDate).to.be(0);
            expect(data.deleted).to.be.a('number');
            // expect(data.deleted).to.be(0);
            expect(data.hidden).to.be.a('number');
            // expect(data.hidden).to.be(0);
            expect(data.sorting).to.be.a('number');
            // expect(data.sorting).to.be(0);
            expect(data.tags).to.be.a('string');
            // expect(data.tags).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('taskList', function() {
        it('should call taskList successfully', function(done) {
          // TODO: uncomment taskList call and complete the assertions
          /*

          instance.taskList().then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SeminarCatalogApi.TaskPaginationResult);
            expect(data.limit).to.be.a('number');
            // expect(data.limit).to.be(0);
            expect(data.offset).to.be.a('number');
            // expect(data.offset).to.be(0);
            expect(data.entryCount).to.be.a('number');
            // expect(data.entryCount).to.be(0);
            expect(data.maxEntryCount).to.be.a('number');
            // expect(data.maxEntryCount).to.be(0);
            {
              let dataCtr = data.entries;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SeminarCatalogApi.Task);
                expect(data.title).to.be.a('string');
                // expect(data.title).to.be("");
                expect(data.description).to.be.a('string');
                // expect(data.description).to.be("");
                expect(data.status).to.be.a('number');
                // expect(data.status).to.be(0);
                expect(data.notes).to.be.a('string');
                // expect(data.notes).to.be("");
                expect(data.changes).to.be.a('string');
                // expect(data.changes).to.be("");
                expect(data.dueDate).to.be.a('number');
                // expect(data.dueDate).to.be(0);
                expect(data.firstReminderStatus).to.be.a('number');
                // expect(data.firstReminderStatus).to.be(0);
                {
                  let dataCtr = data.syncFields;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    // expect(data).to.be("");
                  }
                }
                expect(data.id).to.be.a('number');
                // expect(data.id).to.be(0);
                expect(data.foreignId).to.be.a('string');
                // expect(data.foreignId).to.be("");
                expect(data.language).to.be.a('number');
                // expect(data.language).to.be(0);
                expect(data.createDate).to.be.a('number');
                // expect(data.createDate).to.be(0);
                expect(data.changeDate).to.be.a('number');
                // expect(data.changeDate).to.be(0);
                expect(data.deleted).to.be.a('number');
                // expect(data.deleted).to.be(0);
                expect(data.hidden).to.be.a('number');
                // expect(data.hidden).to.be(0);
                expect(data.sorting).to.be.a('number');
                // expect(data.sorting).to.be(0);
                expect(data.tags).to.be.a('string');
                // expect(data.tags).to.be("");
              }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('taskUpdate', function() {
        it('should call taskUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for taskUpdate call and complete the assertions
          /*
          var id = 56;

          instance.taskUpdate(id).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(SeminarCatalogApi.Task);
            expect(data.title).to.be.a('string');
            // expect(data.title).to.be("");
            expect(data.description).to.be.a('string');
            // expect(data.description).to.be("");
            expect(data.status).to.be.a('number');
            // expect(data.status).to.be(0);
            expect(data.notes).to.be.a('string');
            // expect(data.notes).to.be("");
            expect(data.changes).to.be.a('string');
            // expect(data.changes).to.be("");
            expect(data.dueDate).to.be.a('number');
            // expect(data.dueDate).to.be(0);
            expect(data.firstReminderStatus).to.be.a('number');
            // expect(data.firstReminderStatus).to.be(0);
            {
              let dataCtr = data.syncFields;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                // expect(data).to.be("");
              }
            }
            expect(data.id).to.be.a('number');
            // expect(data.id).to.be(0);
            expect(data.foreignId).to.be.a('string');
            // expect(data.foreignId).to.be("");
            expect(data.language).to.be.a('number');
            // expect(data.language).to.be(0);
            expect(data.createDate).to.be.a('number');
            // expect(data.createDate).to.be(0);
            expect(data.changeDate).to.be.a('number');
            // expect(data.changeDate).to.be(0);
            expect(data.deleted).to.be.a('number');
            // expect(data.deleted).to.be(0);
            expect(data.hidden).to.be.a('number');
            // expect(data.hidden).to.be(0);
            expect(data.sorting).to.be.a('number');
            // expect(data.sorting).to.be(0);
            expect(data.tags).to.be.a('string');
            // expect(data.tags).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
