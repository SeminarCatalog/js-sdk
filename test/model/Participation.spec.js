/*
 * SeminarCatalog API
 * Rest API for SeminarCatalog Administration
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@databay.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SeminarCatalogApi);
  }
}(this, function(expect, SeminarCatalogApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Participation', function() {
      beforeEach(function() {
        instance = new SeminarCatalogApi.Participation();
      });

      it('should create an instance of Participation', function() {
        // TODO: update the code to test Participation
        expect(instance).to.be.a(SeminarCatalogApi.Participation);
      });

      it('should have the property seminar (base name: "seminar")', function() {
        // TODO: update the code to test the property seminar
        expect(instance).to.have.property('seminar');
        // expect(instance.seminar).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property accommodation (base name: "accommodation")', function() {
        // TODO: update the code to test the property accommodation
        expect(instance).to.have.property('accommodation');
        // expect(instance.accommodation).to.be(expectedValueLiteral);
      });

      it('should have the property confirmation (base name: "confirmation")', function() {
        // TODO: update the code to test the property confirmation
        expect(instance).to.have.property('confirmation');
        // expect(instance.confirmation).to.be(expectedValueLiteral);
      });

      it('should have the property checkedParticipantData (base name: "checkedParticipantData")', function() {
        // TODO: update the code to test the property checkedParticipantData
        expect(instance).to.have.property('checkedParticipantData');
        // expect(instance.checkedParticipantData).to.be(expectedValueLiteral);
      });

      it('should have the property faxReceived (base name: "faxReceived")', function() {
        // TODO: update the code to test the property faxReceived
        expect(instance).to.have.property('faxReceived');
        // expect(instance.faxReceived).to.be(expectedValueLiteral);
      });

      it('should have the property faxFile (base name: "faxFile")', function() {
        // TODO: update the code to test the property faxFile
        expect(instance).to.have.property('faxFile');
        // expect(instance.faxFile).to.be(expectedValueLiteral);
      });

      it('should have the property learningFinished (base name: "learningFinished")', function() {
        // TODO: update the code to test the property learningFinished
        expect(instance).to.have.property('learningFinished');
        // expect(instance.learningFinished).to.be(expectedValueLiteral);
      });

      it('should have the property exportedToList (base name: "exportedToList")', function() {
        // TODO: update the code to test the property exportedToList
        expect(instance).to.have.property('exportedToList');
        // expect(instance.exportedToList).to.be(expectedValueLiteral);
      });

      it('should have the property hasCertificate (base name: "hasCertificate")', function() {
        // TODO: update the code to test the property hasCertificate
        expect(instance).to.have.property('hasCertificate');
        // expect(instance.hasCertificate).to.be(expectedValueLiteral);
      });

      it('should have the property downloadCertificate (base name: "downloadCertificate")', function() {
        // TODO: update the code to test the property downloadCertificate
        expect(instance).to.have.property('downloadCertificate');
        // expect(instance.downloadCertificate).to.be(expectedValueLiteral);
      });

      it('should have the property workingGroup (base name: "workingGroup")', function() {
        // TODO: update the code to test the property workingGroup
        expect(instance).to.have.property('workingGroup');
        // expect(instance.workingGroup).to.be(expectedValueLiteral);
      });

      it('should have the property materialShippingDate (base name: "materialShippingDate")', function() {
        // TODO: update the code to test the property materialShippingDate
        expect(instance).to.have.property('materialShippingDate');
        // expect(instance.materialShippingDate).to.be(expectedValueLiteral);
      });

      it('should have the property annotation (base name: "annotation")', function() {
        // TODO: update the code to test the property annotation
        expect(instance).to.have.property('annotation');
        // expect(instance.annotation).to.be(expectedValueLiteral);
      });

      it('should have the property attendance (base name: "attendance")', function() {
        // TODO: update the code to test the property attendance
        expect(instance).to.have.property('attendance');
        // expect(instance.attendance).to.be(expectedValueLiteral);
      });

      it('should have the property attendanceDate (base name: "attendanceDate")', function() {
        // TODO: update the code to test the property attendanceDate
        expect(instance).to.have.property('attendanceDate');
        // expect(instance.attendanceDate).to.be(expectedValueLiteral);
      });

      it('should have the property presentDays (base name: "presentDays")', function() {
        // TODO: update the code to test the property presentDays
        expect(instance).to.have.property('presentDays');
        // expect(instance.presentDays).to.be(expectedValueLiteral);
      });

      it('should have the property hasInstructorPotential (base name: "hasInstructorPotential")', function() {
        // TODO: update the code to test the property hasInstructorPotential
        expect(instance).to.have.property('hasInstructorPotential');
        // expect(instance.hasInstructorPotential).to.be(expectedValueLiteral);
      });

      it('should have the property firstReminderStatus (base name: "firstReminderStatus")', function() {
        // TODO: update the code to test the property firstReminderStatus
        expect(instance).to.have.property('firstReminderStatus');
        // expect(instance.firstReminderStatus).to.be(expectedValueLiteral);
      });

      it('should have the property secondReminderStatus (base name: "secondReminderStatus")', function() {
        // TODO: update the code to test the property secondReminderStatus
        expect(instance).to.have.property('secondReminderStatus');
        // expect(instance.secondReminderStatus).to.be(expectedValueLiteral);
      });

      it('should have the property thirdReminderStatus (base name: "thirdReminderStatus")', function() {
        // TODO: update the code to test the property thirdReminderStatus
        expect(instance).to.have.property('thirdReminderStatus');
        // expect(instance.thirdReminderStatus).to.be(expectedValueLiteral);
      });

      it('should have the property certificateDate (base name: "certificateDate")', function() {
        // TODO: update the code to test the property certificateDate
        expect(instance).to.have.property('certificateDate');
        // expect(instance.certificateDate).to.be(expectedValueLiteral);
      });

      it('should have the property instructorPotentialDate (base name: "instructorPotentialDate")', function() {
        // TODO: update the code to test the property instructorPotentialDate
        expect(instance).to.have.property('instructorPotentialDate');
        // expect(instance.instructorPotentialDate).to.be(expectedValueLiteral);
      });

      it('should have the property document (base name: "document")', function() {
        // TODO: update the code to test the property document
        expect(instance).to.have.property('document');
        // expect(instance.document).to.be(expectedValueLiteral);
      });

      it('should have the property documentWhere (base name: "documentWhere")', function() {
        // TODO: update the code to test the property documentWhere
        expect(instance).to.have.property('documentWhere');
        // expect(instance.documentWhere).to.be(expectedValueLiteral);
      });

      it('should have the property documentDate (base name: "documentDate")', function() {
        // TODO: update the code to test the property documentDate
        expect(instance).to.have.property('documentDate');
        // expect(instance.documentDate).to.be(expectedValueLiteral);
      });

      it('should have the property requirementsFulfilled (base name: "requirementsFulfilled")', function() {
        // TODO: update the code to test the property requirementsFulfilled
        expect(instance).to.have.property('requirementsFulfilled');
        // expect(instance.requirementsFulfilled).to.be(expectedValueLiteral);
      });

      it('should have the property hasManCertificate (base name: "hasManCertificate")', function() {
        // TODO: update the code to test the property hasManCertificate
        expect(instance).to.have.property('hasManCertificate');
        // expect(instance.hasManCertificate).to.be(expectedValueLiteral);
      });

      it('should have the property enablingUser (base name: "enablingUser")', function() {
        // TODO: update the code to test the property enablingUser
        expect(instance).to.have.property('enablingUser');
        // expect(instance.enablingUser).to.be(expectedValueLiteral);
      });

      it('should have the property enablingComment (base name: "enablingComment")', function() {
        // TODO: update the code to test the property enablingComment
        expect(instance).to.have.property('enablingComment');
        // expect(instance.enablingComment).to.be(expectedValueLiteral);
      });

      it('should have the property blockedManCertificate (base name: "blockedManCertificate")', function() {
        // TODO: update the code to test the property blockedManCertificate
        expect(instance).to.have.property('blockedManCertificate');
        // expect(instance.blockedManCertificate).to.be(expectedValueLiteral);
      });

      it('should have the property blockingUser (base name: "blockingUser")', function() {
        // TODO: update the code to test the property blockingUser
        expect(instance).to.have.property('blockingUser');
        // expect(instance.blockingUser).to.be(expectedValueLiteral);
      });

      it('should have the property blockingDate (base name: "blockingDate")', function() {
        // TODO: update the code to test the property blockingDate
        expect(instance).to.have.property('blockingDate');
        // expect(instance.blockingDate).to.be(expectedValueLiteral);
      });

      it('should have the property blockingComment (base name: "blockingComment")', function() {
        // TODO: update the code to test the property blockingComment
        expect(instance).to.have.property('blockingComment');
        // expect(instance.blockingComment).to.be(expectedValueLiteral);
      });

      it('should have the property client (base name: "client")', function() {
        // TODO: update the code to test the property client
        expect(instance).to.have.property('client');
        // expect(instance.client).to.be(expectedValueLiteral);
      });

      it('should have the property certBody (base name: "certBody")', function() {
        // TODO: update the code to test the property certBody
        expect(instance).to.have.property('certBody');
        // expect(instance.certBody).to.be(expectedValueLiteral);
      });

      it('should have the property syncFields (base name: "_syncFields")', function() {
        // TODO: update the code to test the property syncFields
        expect(instance).to.have.property('syncFields');
        // expect(instance.syncFields).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property foreignId (base name: "foreignId")', function() {
        // TODO: update the code to test the property foreignId
        expect(instance).to.have.property('foreignId');
        // expect(instance.foreignId).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property createDate (base name: "createDate")', function() {
        // TODO: update the code to test the property createDate
        expect(instance).to.have.property('createDate');
        // expect(instance.createDate).to.be(expectedValueLiteral);
      });

      it('should have the property changeDate (base name: "changeDate")', function() {
        // TODO: update the code to test the property changeDate
        expect(instance).to.have.property('changeDate');
        // expect(instance.changeDate).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property hidden (base name: "hidden")', function() {
        // TODO: update the code to test the property hidden
        expect(instance).to.have.property('hidden');
        // expect(instance.hidden).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

    });
  });

}));
