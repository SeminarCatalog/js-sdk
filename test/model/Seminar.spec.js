/*
 * SeminarCatalog API
 * Rest API for SeminarCatalog Administration
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@databay.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SeminarCatalogApi);
  }
}(this, function(expect, SeminarCatalogApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Seminar', function() {
      beforeEach(function() {
        instance = new SeminarCatalogApi.Seminar();
      });

      it('should create an instance of Seminar', function() {
        // TODO: update the code to test Seminar
        expect(instance).to.be.a(SeminarCatalogApi.Seminar);
      });

      it('should have the property syncFields (base name: "_syncFields")', function() {
        // TODO: update the code to test the property syncFields
        expect(instance).to.have.property('syncFields');
        // expect(instance.syncFields).to.be(expectedValueLiteral);
      });

      it('should have the property identifier (base name: "identifier")', function() {
        // TODO: update the code to test the property identifier
        expect(instance).to.have.property('identifier');
        // expect(instance.identifier).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property subtitle (base name: "subtitle")', function() {
        // TODO: update the code to test the property subtitle
        expect(instance).to.have.property('subtitle');
        // expect(instance.subtitle).to.be(expectedValueLiteral);
      });

      it('should have the property teaser (base name: "teaser")', function() {
        // TODO: update the code to test the property teaser
        expect(instance).to.have.property('teaser');
        // expect(instance.teaser).to.be(expectedValueLiteral);
      });

      it('should have the property intro (base name: "intro")', function() {
        // TODO: update the code to test the property intro
        expect(instance).to.have.property('intro');
        // expect(instance.intro).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property organizerInfo (base name: "organizerInfo")', function() {
        // TODO: update the code to test the property organizerInfo
        expect(instance).to.have.property('organizerInfo');
        // expect(instance.organizerInfo).to.be(expectedValueLiteral);
      });

      it('should have the property partnerInfo (base name: "partnerInfo")', function() {
        // TODO: update the code to test the property partnerInfo
        expect(instance).to.have.property('partnerInfo');
        // expect(instance.partnerInfo).to.be(expectedValueLiteral);
      });

      it('should have the property externalUrl (base name: "externalUrl")', function() {
        // TODO: update the code to test the property externalUrl
        expect(instance).to.have.property('externalUrl');
        // expect(instance.externalUrl).to.be(expectedValueLiteral);
      });

      it('should have the property trainerInfo (base name: "trainerInfo")', function() {
        // TODO: update the code to test the property trainerInfo
        expect(instance).to.have.property('trainerInfo');
        // expect(instance.trainerInfo).to.be(expectedValueLiteral);
      });

      it('should have the property contactDetails (base name: "contactDetails")', function() {
        // TODO: update the code to test the property contactDetails
        expect(instance).to.have.property('contactDetails');
        // expect(instance.contactDetails).to.be(expectedValueLiteral);
      });

      it('should have the property rolesVisibility (base name: "rolesVisibility")', function() {
        // TODO: update the code to test the property rolesVisibility
        expect(instance).to.have.property('rolesVisibility');
        // expect(instance.rolesVisibility).to.be(expectedValueLiteral);
      });

      it('should have the property rolesBooking (base name: "rolesBooking")', function() {
        // TODO: update the code to test the property rolesBooking
        expect(instance).to.have.property('rolesBooking');
        // expect(instance.rolesBooking).to.be(expectedValueLiteral);
      });

      it('should have the property birthdateRequired (base name: "birthdateRequired")', function() {
        // TODO: update the code to test the property birthdateRequired
        expect(instance).to.have.property('birthdateRequired');
        // expect(instance.birthdateRequired).to.be(expectedValueLiteral);
      });

      it('should have the property birthplaceRequired (base name: "birthplaceRequired")', function() {
        // TODO: update the code to test the property birthplaceRequired
        expect(instance).to.have.property('birthplaceRequired');
        // expect(instance.birthplaceRequired).to.be(expectedValueLiteral);
      });

      it('should have the property utNumberRequired (base name: "utNumberRequired")', function() {
        // TODO: update the code to test the property utNumberRequired
        expect(instance).to.have.property('utNumberRequired');
        // expect(instance.utNumberRequired).to.be(expectedValueLiteral);
      });

      it('should have the property hideInCatalog (base name: "hideInCatalog")', function() {
        // TODO: update the code to test the property hideInCatalog
        expect(instance).to.have.property('hideInCatalog');
        // expect(instance.hideInCatalog).to.be(expectedValueLiteral);
      });

      it('should have the property content (base name: "content")', function() {
        // TODO: update the code to test the property content
        expect(instance).to.have.property('content');
        // expect(instance.content).to.be(expectedValueLiteral);
      });

      it('should have the property targetGroupInfo (base name: "targetGroupInfo")', function() {
        // TODO: update the code to test the property targetGroupInfo
        expect(instance).to.have.property('targetGroupInfo');
        // expect(instance.targetGroupInfo).to.be(expectedValueLiteral);
      });

      it('should have the property requirements (base name: "requirements")', function() {
        // TODO: update the code to test the property requirements
        expect(instance).to.have.property('requirements');
        // expect(instance.requirements).to.be(expectedValueLiteral);
      });

      it('should have the property agenda (base name: "agenda")', function() {
        // TODO: update the code to test the property agenda
        expect(instance).to.have.property('agenda');
        // expect(instance.agenda).to.be(expectedValueLiteral);
      });

      it('should have the property hints (base name: "hints")', function() {
        // TODO: update the code to test the property hints
        expect(instance).to.have.property('hints');
        // expect(instance.hints).to.be(expectedValueLiteral);
      });

      it('should have the property qualification (base name: "qualification")', function() {
        // TODO: update the code to test the property qualification
        expect(instance).to.have.property('qualification');
        // expect(instance.qualification).to.be(expectedValueLiteral);
      });

      it('should have the property learningGoals (base name: "learningGoals")', function() {
        // TODO: update the code to test the property learningGoals
        expect(instance).to.have.property('learningGoals');
        // expect(instance.learningGoals).to.be(expectedValueLiteral);
      });

      it('should have the property cvIsRequired (base name: "cvIsRequired")', function() {
        // TODO: update the code to test the property cvIsRequired
        expect(instance).to.have.property('cvIsRequired');
        // expect(instance.cvIsRequired).to.be(expectedValueLiteral);
      });

      it('should have the property coursePreparation (base name: "coursePreparation")', function() {
        // TODO: update the code to test the property coursePreparation
        expect(instance).to.have.property('coursePreparation');
        // expect(instance.coursePreparation).to.be(expectedValueLiteral);
      });

      it('should have the property certificateInfo (base name: "certificateInfo")', function() {
        // TODO: update the code to test the property certificateInfo
        expect(instance).to.have.property('certificateInfo');
        // expect(instance.certificateInfo).to.be(expectedValueLiteral);
      });

      it('should have the property instructorPotentialRole (base name: "instructorPotentialRole")', function() {
        // TODO: update the code to test the property instructorPotentialRole
        expect(instance).to.have.property('instructorPotentialRole');
        // expect(instance.instructorPotentialRole).to.be(expectedValueLiteral);
      });

      it('should have the property certificateTemplate (base name: "certificateTemplate")', function() {
        // TODO: update the code to test the property certificateTemplate
        expect(instance).to.have.property('certificateTemplate');
        // expect(instance.certificateTemplate).to.be(expectedValueLiteral);
      });

      it('should have the property shippingInformation (base name: "shippingInformation")', function() {
        // TODO: update the code to test the property shippingInformation
        expect(instance).to.have.property('shippingInformation');
        // expect(instance.shippingInformation).to.be(expectedValueLiteral);
      });

      it('should have the property courseInformation1 (base name: "courseInformation1")', function() {
        // TODO: update the code to test the property courseInformation1
        expect(instance).to.have.property('courseInformation1');
        // expect(instance.courseInformation1).to.be(expectedValueLiteral);
      });

      it('should have the property courseInformation2 (base name: "courseInformation2")', function() {
        // TODO: update the code to test the property courseInformation2
        expect(instance).to.have.property('courseInformation2');
        // expect(instance.courseInformation2).to.be(expectedValueLiteral);
      });

      it('should have the property courseInformation3 (base name: "courseInformation3")', function() {
        // TODO: update the code to test the property courseInformation3
        expect(instance).to.have.property('courseInformation3');
        // expect(instance.courseInformation3).to.be(expectedValueLiteral);
      });

      it('should have the property hasCertificate (base name: "hasCertificate")', function() {
        // TODO: update the code to test the property hasCertificate
        expect(instance).to.have.property('hasCertificate');
        // expect(instance.hasCertificate).to.be(expectedValueLiteral);
      });

      it('should have the property certNumberMonthsValid (base name: "certNumberMonthsValid")', function() {
        // TODO: update the code to test the property certNumberMonthsValid
        expect(instance).to.have.property('certNumberMonthsValid');
        // expect(instance.certNumberMonthsValid).to.be(expectedValueLiteral);
      });

      it('should have the property certRespPrecondition (base name: "certRespPrecondition")', function() {
        // TODO: update the code to test the property certRespPrecondition
        expect(instance).to.have.property('certRespPrecondition');
        // expect(instance.certRespPrecondition).to.be(expectedValueLiteral);
      });

      it('should have the property certRespCourse (base name: "certRespCourse")', function() {
        // TODO: update the code to test the property certRespCourse
        expect(instance).to.have.property('certRespCourse');
        // expect(instance.certRespCourse).to.be(expectedValueLiteral);
      });

      it('should have the property certRespParticipation (base name: "certRespParticipation")', function() {
        // TODO: update the code to test the property certRespParticipation
        expect(instance).to.have.property('certRespParticipation');
        // expect(instance.certRespParticipation).to.be(expectedValueLiteral);
      });

      it('should have the property certRespConfirmation (base name: "certRespConfirmation")', function() {
        // TODO: update the code to test the property certRespConfirmation
        expect(instance).to.have.property('certRespConfirmation');
        // expect(instance.certRespConfirmation).to.be(expectedValueLiteral);
      });

      it('should have the property inPlanning (base name: "inPlanning")', function() {
        // TODO: update the code to test the property inPlanning
        expect(instance).to.have.property('inPlanning');
        // expect(instance.inPlanning).to.be(expectedValueLiteral);
      });

      it('should have the property planningDescription (base name: "planningDescription")', function() {
        // TODO: update the code to test the property planningDescription
        expect(instance).to.have.property('planningDescription');
        // expect(instance.planningDescription).to.be(expectedValueLiteral);
      });

      it('should have the property bookableForInhouse (base name: "bookableForInhouse")', function() {
        // TODO: update the code to test the property bookableForInhouse
        expect(instance).to.have.property('bookableForInhouse');
        // expect(instance.bookableForInhouse).to.be(expectedValueLiteral);
      });

      it('should have the property sendCertificateReminder (base name: "sendCertificateReminder")', function() {
        // TODO: update the code to test the property sendCertificateReminder
        expect(instance).to.have.property('sendCertificateReminder');
        // expect(instance.sendCertificateReminder).to.be(expectedValueLiteral);
      });

      it('should have the property daysUntilCertReminder (base name: "daysUntilCertReminder")', function() {
        // TODO: update the code to test the property daysUntilCertReminder
        expect(instance).to.have.property('daysUntilCertReminder');
        // expect(instance.daysUntilCertReminder).to.be(expectedValueLiteral);
      });

      it('should have the property monthsForCertExtend (base name: "monthsForCertExtend")', function() {
        // TODO: update the code to test the property monthsForCertExtend
        expect(instance).to.have.property('monthsForCertExtend');
        // expect(instance.monthsForCertExtend).to.be(expectedValueLiteral);
      });

      it('should have the property certExtensionDate (base name: "certExtensionDate")', function() {
        // TODO: update the code to test the property certExtensionDate
        expect(instance).to.have.property('certExtensionDate');
        // expect(instance.certExtensionDate).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property foreignId (base name: "foreignId")', function() {
        // TODO: update the code to test the property foreignId
        expect(instance).to.have.property('foreignId');
        // expect(instance.foreignId).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property createDate (base name: "createDate")', function() {
        // TODO: update the code to test the property createDate
        expect(instance).to.have.property('createDate');
        // expect(instance.createDate).to.be(expectedValueLiteral);
      });

      it('should have the property changeDate (base name: "changeDate")', function() {
        // TODO: update the code to test the property changeDate
        expect(instance).to.have.property('changeDate');
        // expect(instance.changeDate).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property hidden (base name: "hidden")', function() {
        // TODO: update the code to test the property hidden
        expect(instance).to.have.property('hidden');
        // expect(instance.hidden).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

    });
  });

}));
