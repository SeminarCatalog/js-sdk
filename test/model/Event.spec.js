/*
 * SeminarCatalog API
 * Rest API for SeminarCatalog Administration
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@databay.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SeminarCatalogApi);
  }
}(this, function(expect, SeminarCatalogApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Event', function() {
      beforeEach(function() {
        instance = new SeminarCatalogApi.Event();
      });

      it('should create an instance of Event', function() {
        // TODO: update the code to test Event
        expect(instance).to.be.a(SeminarCatalogApi.Event);
      });

      it('should have the property syncFields (base name: "_syncFields")', function() {
        // TODO: update the code to test the property syncFields
        expect(instance).to.have.property('syncFields');
        // expect(instance.syncFields).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property classTimes (base name: "classTimes")', function() {
        // TODO: update the code to test the property classTimes
        expect(instance).to.have.property('classTimes');
        // expect(instance.classTimes).to.be(expectedValueLiteral);
      });

      it('should have the property bookingType (base name: "bookingType")', function() {
        // TODO: update the code to test the property bookingType
        expect(instance).to.have.property('bookingType');
        // expect(instance.bookingType).to.be(expectedValueLiteral);
      });

      it('should have the property bookingStartDate (base name: "bookingStartDate")', function() {
        // TODO: update the code to test the property bookingStartDate
        expect(instance).to.have.property('bookingStartDate');
        // expect(instance.bookingStartDate).to.be(expectedValueLiteral);
      });

      it('should have the property bookingEndDate (base name: "bookingEndDate")', function() {
        // TODO: update the code to test the property bookingEndDate
        expect(instance).to.have.property('bookingEndDate');
        // expect(instance.bookingEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property accessType (base name: "accessType")', function() {
        // TODO: update the code to test the property accessType
        expect(instance).to.have.property('accessType');
        // expect(instance.accessType).to.be(expectedValueLiteral);
      });

      it('should have the property accessTime (base name: "accessTime")', function() {
        // TODO: update the code to test the property accessTime
        expect(instance).to.have.property('accessTime');
        // expect(instance.accessTime).to.be(expectedValueLiteral);
      });

      it('should have the property accessStartDate (base name: "accessStartDate")', function() {
        // TODO: update the code to test the property accessStartDate
        expect(instance).to.have.property('accessStartDate');
        // expect(instance.accessStartDate).to.be(expectedValueLiteral);
      });

      it('should have the property accessEndDate (base name: "accessEndDate")', function() {
        // TODO: update the code to test the property accessEndDate
        expect(instance).to.have.property('accessEndDate');
        // expect(instance.accessEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property minParticipants (base name: "minParticipants")', function() {
        // TODO: update the code to test the property minParticipants
        expect(instance).to.have.property('minParticipants');
        // expect(instance.minParticipants).to.be(expectedValueLiteral);
      });

      it('should have the property maxParticipants (base name: "maxParticipants")', function() {
        // TODO: update the code to test the property maxParticipants
        expect(instance).to.have.property('maxParticipants');
        // expect(instance.maxParticipants).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property courseRefId (base name: "courseRefId")', function() {
        // TODO: update the code to test the property courseRefId
        expect(instance).to.have.property('courseRefId');
        // expect(instance.courseRefId).to.be(expectedValueLiteral);
      });

      it('should have the property additionalLocationInfo (base name: "additionalLocationInfo")', function() {
        // TODO: update the code to test the property additionalLocationInfo
        expect(instance).to.have.property('additionalLocationInfo');
        // expect(instance.additionalLocationInfo).to.be(expectedValueLiteral);
      });

      it('should have the property eventType (base name: "eventType")', function() {
        // TODO: update the code to test the property eventType
        expect(instance).to.have.property('eventType');
        // expect(instance.eventType).to.be(expectedValueLiteral);
      });

      it('should have the property hasInstructor (base name: "hasInstructor")', function() {
        // TODO: update the code to test the property hasInstructor
        expect(instance).to.have.property('hasInstructor');
        // expect(instance.hasInstructor).to.be(expectedValueLiteral);
      });

      it('should have the property hasInstructorCandidate (base name: "hasInstructorCandidate")', function() {
        // TODO: update the code to test the property hasInstructorCandidate
        expect(instance).to.have.property('hasInstructorCandidate');
        // expect(instance.hasInstructorCandidate).to.be(expectedValueLiteral);
      });

      it('should have the property hasInstructorExaminer (base name: "hasInstructorExaminer")', function() {
        // TODO: update the code to test the property hasInstructorExaminer
        expect(instance).to.have.property('hasInstructorExaminer');
        // expect(instance.hasInstructorExaminer).to.be(expectedValueLiteral);
      });

      it('should have the property hasAssistant (base name: "hasAssistant")', function() {
        // TODO: update the code to test the property hasAssistant
        expect(instance).to.have.property('hasAssistant');
        // expect(instance.hasAssistant).to.be(expectedValueLiteral);
      });

      it('should have the property hasAssistantCandidate (base name: "hasAssistantCandidate")', function() {
        // TODO: update the code to test the property hasAssistantCandidate
        expect(instance).to.have.property('hasAssistantCandidate');
        // expect(instance.hasAssistantCandidate).to.be(expectedValueLiteral);
      });

      it('should have the property hasDirector (base name: "hasDirector")', function() {
        // TODO: update the code to test the property hasDirector
        expect(instance).to.have.property('hasDirector');
        // expect(instance.hasDirector).to.be(expectedValueLiteral);
      });

      it('should have the property hasAdvisor (base name: "hasAdvisor")', function() {
        // TODO: update the code to test the property hasAdvisor
        expect(instance).to.have.property('hasAdvisor');
        // expect(instance.hasAdvisor).to.be(expectedValueLiteral);
      });

      it('should have the property instructorRole (base name: "instructorRole")', function() {
        // TODO: update the code to test the property instructorRole
        expect(instance).to.have.property('instructorRole');
        // expect(instance.instructorRole).to.be(expectedValueLiteral);
      });

      it('should have the property instructorCandidateRole (base name: "instructorCandidateRole")', function() {
        // TODO: update the code to test the property instructorCandidateRole
        expect(instance).to.have.property('instructorCandidateRole');
        // expect(instance.instructorCandidateRole).to.be(expectedValueLiteral);
      });

      it('should have the property instructorExaminerRole (base name: "instructorExaminerRole")', function() {
        // TODO: update the code to test the property instructorExaminerRole
        expect(instance).to.have.property('instructorExaminerRole');
        // expect(instance.instructorExaminerRole).to.be(expectedValueLiteral);
      });

      it('should have the property directorRole (base name: "directorRole")', function() {
        // TODO: update the code to test the property directorRole
        expect(instance).to.have.property('directorRole');
        // expect(instance.directorRole).to.be(expectedValueLiteral);
      });

      it('should have the property advisorRole (base name: "advisorRole")', function() {
        // TODO: update the code to test the property advisorRole
        expect(instance).to.have.property('advisorRole');
        // expect(instance.advisorRole).to.be(expectedValueLiteral);
      });

      it('should have the property instructorNumber (base name: "instructorNumber")', function() {
        // TODO: update the code to test the property instructorNumber
        expect(instance).to.have.property('instructorNumber');
        // expect(instance.instructorNumber).to.be(expectedValueLiteral);
      });

      it('should have the property instructorCandidateNumber (base name: "instructorCandidateNumber")', function() {
        // TODO: update the code to test the property instructorCandidateNumber
        expect(instance).to.have.property('instructorCandidateNumber');
        // expect(instance.instructorCandidateNumber).to.be(expectedValueLiteral);
      });

      it('should have the property instructorExaminerNumber (base name: "instructorExaminerNumber")', function() {
        // TODO: update the code to test the property instructorExaminerNumber
        expect(instance).to.have.property('instructorExaminerNumber');
        // expect(instance.instructorExaminerNumber).to.be(expectedValueLiteral);
      });

      it('should have the property directorNumber (base name: "directorNumber")', function() {
        // TODO: update the code to test the property directorNumber
        expect(instance).to.have.property('directorNumber');
        // expect(instance.directorNumber).to.be(expectedValueLiteral);
      });

      it('should have the property advisorNumber (base name: "advisorNumber")', function() {
        // TODO: update the code to test the property advisorNumber
        expect(instance).to.have.property('advisorNumber');
        // expect(instance.advisorNumber).to.be(expectedValueLiteral);
      });

      it('should have the property ignoreInvoice (base name: "ignoreInvoice")', function() {
        // TODO: update the code to test the property ignoreInvoice
        expect(instance).to.have.property('ignoreInvoice');
        // expect(instance.ignoreInvoice).to.be(expectedValueLiteral);
      });

      it('should have the property eventUnlimitedAvailable (base name: "eventUnlimitedAvailable")', function() {
        // TODO: update the code to test the property eventUnlimitedAvailable
        expect(instance).to.have.property('eventUnlimitedAvailable');
        // expect(instance.eventUnlimitedAvailable).to.be(expectedValueLiteral);
      });

      it('should have the property eventStartDate (base name: "eventStartDate")', function() {
        // TODO: update the code to test the property eventStartDate
        expect(instance).to.have.property('eventStartDate');
        // expect(instance.eventStartDate).to.be(expectedValueLiteral);
      });

      it('should have the property eventEndDate (base name: "eventEndDate")', function() {
        // TODO: update the code to test the property eventEndDate
        expect(instance).to.have.property('eventEndDate');
        // expect(instance.eventEndDate).to.be(expectedValueLiteral);
      });

      it('should have the property numberDays (base name: "numberDays")', function() {
        // TODO: update the code to test the property numberDays
        expect(instance).to.have.property('numberDays');
        // expect(instance.numberDays).to.be(expectedValueLiteral);
      });

      it('should have the property additionalDateInfo (base name: "additionalDateInfo")', function() {
        // TODO: update the code to test the property additionalDateInfo
        expect(instance).to.have.property('additionalDateInfo');
        // expect(instance.additionalDateInfo).to.be(expectedValueLiteral);
      });

      it('should have the property bookingForOthersAllowed (base name: "bookingForOthersAllowed")', function() {
        // TODO: update the code to test the property bookingForOthersAllowed
        expect(instance).to.have.property('bookingForOthersAllowed');
        // expect(instance.bookingForOthersAllowed).to.be(expectedValueLiteral);
      });

      it('should have the property hideInCatalog (base name: "hideInCatalog")', function() {
        // TODO: update the code to test the property hideInCatalog
        expect(instance).to.have.property('hideInCatalog');
        // expect(instance.hideInCatalog).to.be(expectedValueLiteral);
      });

      it('should have the property hideFullyBooked (base name: "hideFullyBooked")', function() {
        // TODO: update the code to test the property hideFullyBooked
        expect(instance).to.have.property('hideFullyBooked');
        // expect(instance.hideFullyBooked).to.be(expectedValueLiteral);
      });

      it('should have the property notBookable (base name: "notBookable")', function() {
        // TODO: update the code to test the property notBookable
        expect(instance).to.have.property('notBookable');
        // expect(instance.notBookable).to.be(expectedValueLiteral);
      });

      it('should have the property costCentre (base name: "costCentre")', function() {
        // TODO: update the code to test the property costCentre
        expect(instance).to.have.property('costCentre');
        // expect(instance.costCentre).to.be(expectedValueLiteral);
      });

      it('should have the property hideInfoBlock (base name: "hideInfoBlock")', function() {
        // TODO: update the code to test the property hideInfoBlock
        expect(instance).to.have.property('hideInfoBlock');
        // expect(instance.hideInfoBlock).to.be(expectedValueLiteral);
      });

      it('should have the property eventRequest (base name: "eventRequest")', function() {
        // TODO: update the code to test the property eventRequest
        expect(instance).to.have.property('eventRequest');
        // expect(instance.eventRequest).to.be(expectedValueLiteral);
      });

      it('should have the property hidePrice (base name: "hidePrice")', function() {
        // TODO: update the code to test the property hidePrice
        expect(instance).to.have.property('hidePrice');
        // expect(instance.hidePrice).to.be(expectedValueLiteral);
      });

      it('should have the property eventRequestInfo (base name: "eventRequestInfo")', function() {
        // TODO: update the code to test the property eventRequestInfo
        expect(instance).to.have.property('eventRequestInfo');
        // expect(instance.eventRequestInfo).to.be(expectedValueLiteral);
      });

      it('should have the property isCancelable (base name: "isCancelable")', function() {
        // TODO: update the code to test the property isCancelable
        expect(instance).to.have.property('isCancelable');
        // expect(instance.isCancelable).to.be(expectedValueLiteral);
      });

      it('should have the property dinnerStartDate (base name: "dinnerStartDate")', function() {
        // TODO: update the code to test the property dinnerStartDate
        expect(instance).to.have.property('dinnerStartDate');
        // expect(instance.dinnerStartDate).to.be(expectedValueLiteral);
      });

      it('should have the property facultyDinnerStartDate (base name: "facultyDinnerStartDate")', function() {
        // TODO: update the code to test the property facultyDinnerStartDate
        expect(instance).to.have.property('facultyDinnerStartDate');
        // expect(instance.facultyDinnerStartDate).to.be(expectedValueLiteral);
      });

      it('should have the property cmeStatus (base name: "cmeStatus")', function() {
        // TODO: update the code to test the property cmeStatus
        expect(instance).to.have.property('cmeStatus');
        // expect(instance.cmeStatus).to.be(expectedValueLiteral);
      });

      it('should have the property cmePoints (base name: "cmePoints")', function() {
        // TODO: update the code to test the property cmePoints
        expect(instance).to.have.property('cmePoints');
        // expect(instance.cmePoints).to.be(expectedValueLiteral);
      });

      it('should have the property cmeEventNumber (base name: "cmeEventNumber")', function() {
        // TODO: update the code to test the property cmeEventNumber
        expect(instance).to.have.property('cmeEventNumber');
        // expect(instance.cmeEventNumber).to.be(expectedValueLiteral);
      });

      it('should have the property client (base name: "client")', function() {
        // TODO: update the code to test the property client
        expect(instance).to.have.property('client');
        // expect(instance.client).to.be(expectedValueLiteral);
      });

      it('should have the property codePartCommentary (base name: "codePartCommentary")', function() {
        // TODO: update the code to test the property codePartCommentary
        expect(instance).to.have.property('codePartCommentary');
        // expect(instance.codePartCommentary).to.be(expectedValueLiteral);
      });

      it('should have the property commentaryExaminer (base name: "commentaryExaminer")', function() {
        // TODO: update the code to test the property commentaryExaminer
        expect(instance).to.have.property('commentaryExaminer');
        // expect(instance.commentaryExaminer).to.be(expectedValueLiteral);
      });

      it('should have the property exportedToList (base name: "exportedToList")', function() {
        // TODO: update the code to test the property exportedToList
        expect(instance).to.have.property('exportedToList');
        // expect(instance.exportedToList).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property foreignId (base name: "foreignId")', function() {
        // TODO: update the code to test the property foreignId
        expect(instance).to.have.property('foreignId');
        // expect(instance.foreignId).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property createDate (base name: "createDate")', function() {
        // TODO: update the code to test the property createDate
        expect(instance).to.have.property('createDate');
        // expect(instance.createDate).to.be(expectedValueLiteral);
      });

      it('should have the property changeDate (base name: "changeDate")', function() {
        // TODO: update the code to test the property changeDate
        expect(instance).to.have.property('changeDate');
        // expect(instance.changeDate).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property hidden (base name: "hidden")', function() {
        // TODO: update the code to test the property hidden
        expect(instance).to.have.property('hidden');
        // expect(instance.hidden).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

    });
  });

}));
