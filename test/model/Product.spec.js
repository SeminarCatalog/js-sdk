/*
 * SeminarCatalog API
 * Rest API for SeminarCatalog Administration
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@databay.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SeminarCatalogApi);
  }
}(this, function(expect, SeminarCatalogApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Product', function() {
      beforeEach(function() {
        instance = new SeminarCatalogApi.Product();
      });

      it('should create an instance of Product', function() {
        // TODO: update the code to test Product
        expect(instance).to.be.a(SeminarCatalogApi.Product);
      });

      it('should have the property syncFields (base name: "_syncFields")', function() {
        // TODO: update the code to test the property syncFields
        expect(instance).to.have.property('syncFields');
        // expect(instance.syncFields).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property subtitle (base name: "subtitle")', function() {
        // TODO: update the code to test the property subtitle
        expect(instance).to.have.property('subtitle');
        // expect(instance.subtitle).to.be(expectedValueLiteral);
      });

      it('should have the property identifier (base name: "identifier")', function() {
        // TODO: update the code to test the property identifier
        expect(instance).to.have.property('identifier');
        // expect(instance.identifier).to.be(expectedValueLiteral);
      });

      it('should have the property teaser (base name: "teaser")', function() {
        // TODO: update the code to test the property teaser
        expect(instance).to.have.property('teaser');
        // expect(instance.teaser).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property externalUrl (base name: "externalUrl")', function() {
        // TODO: update the code to test the property externalUrl
        expect(instance).to.have.property('externalUrl');
        // expect(instance.externalUrl).to.be(expectedValueLiteral);
      });

      it('should have the property rolesVisibility (base name: "rolesVisibility")', function() {
        // TODO: update the code to test the property rolesVisibility
        expect(instance).to.have.property('rolesVisibility');
        // expect(instance.rolesVisibility).to.be(expectedValueLiteral);
      });

      it('should have the property rolesBooking (base name: "rolesBooking")', function() {
        // TODO: update the code to test the property rolesBooking
        expect(instance).to.have.property('rolesBooking');
        // expect(instance.rolesBooking).to.be(expectedValueLiteral);
      });

      it('should have the property hideInCatalog (base name: "hideInCatalog")', function() {
        // TODO: update the code to test the property hideInCatalog
        expect(instance).to.have.property('hideInCatalog');
        // expect(instance.hideInCatalog).to.be(expectedValueLiteral);
      });

      it('should have the property costCentre (base name: "costCentre")', function() {
        // TODO: update the code to test the property costCentre
        expect(instance).to.have.property('costCentre');
        // expect(instance.costCentre).to.be(expectedValueLiteral);
      });

      it('should have the property payers (base name: "payers")', function() {
        // TODO: update the code to test the property payers
        expect(instance).to.have.property('payers');
        // expect(instance.payers).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property foreignId (base name: "foreignId")', function() {
        // TODO: update the code to test the property foreignId
        expect(instance).to.have.property('foreignId');
        // expect(instance.foreignId).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property createDate (base name: "createDate")', function() {
        // TODO: update the code to test the property createDate
        expect(instance).to.have.property('createDate');
        // expect(instance.createDate).to.be(expectedValueLiteral);
      });

      it('should have the property changeDate (base name: "changeDate")', function() {
        // TODO: update the code to test the property changeDate
        expect(instance).to.have.property('changeDate');
        // expect(instance.changeDate).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property hidden (base name: "hidden")', function() {
        // TODO: update the code to test the property hidden
        expect(instance).to.have.property('hidden');
        // expect(instance.hidden).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

    });
  });

}));
