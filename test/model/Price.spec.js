/*
 * SeminarCatalog API
 * Rest API for SeminarCatalog Administration
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@databay.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SeminarCatalogApi);
  }
}(this, function(expect, SeminarCatalogApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Price', function() {
      beforeEach(function() {
        instance = new SeminarCatalogApi.Price();
      });

      it('should create an instance of Price', function() {
        // TODO: update the code to test Price
        expect(instance).to.be.a(SeminarCatalogApi.Price);
      });

      it('should have the property syncFields (base name: "_syncFields")', function() {
        // TODO: update the code to test the property syncFields
        expect(instance).to.have.property('syncFields');
        // expect(instance.syncFields).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property showTitle (base name: "showTitle")', function() {
        // TODO: update the code to test the property showTitle
        expect(instance).to.have.property('showTitle');
        // expect(instance.showTitle).to.be(expectedValueLiteral);
      });

      it('should have the property info (base name: "info")', function() {
        // TODO: update the code to test the property info
        expect(instance).to.have.property('info');
        // expect(instance.info).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property price (base name: "price")', function() {
        // TODO: update the code to test the property price
        expect(instance).to.have.property('price');
        // expect(instance.price).to.be(expectedValueLiteral);
      });

      it('should have the property startDate (base name: "startDate")', function() {
        // TODO: update the code to test the property startDate
        expect(instance).to.have.property('startDate');
        // expect(instance.startDate).to.be(expectedValueLiteral);
      });

      it('should have the property endDate (base name: "endDate")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property minAmount (base name: "minAmount")', function() {
        // TODO: update the code to test the property minAmount
        expect(instance).to.have.property('minAmount');
        // expect(instance.minAmount).to.be(expectedValueLiteral);
      });

      it('should have the property vatIncluded (base name: "vatIncluded")', function() {
        // TODO: update the code to test the property vatIncluded
        expect(instance).to.have.property('vatIncluded');
        // expect(instance.vatIncluded).to.be(expectedValueLiteral);
      });

      it('should have the property forFree (base name: "forFree")', function() {
        // TODO: update the code to test the property forFree
        expect(instance).to.have.property('forFree');
        // expect(instance.forFree).to.be(expectedValueLiteral);
      });

      it('should have the property quantityScaleOffer (base name: "quantityScaleOffer")', function() {
        // TODO: update the code to test the property quantityScaleOffer
        expect(instance).to.have.property('quantityScaleOffer');
        // expect(instance.quantityScaleOffer).to.be(expectedValueLiteral);
      });

      it('should have the property timeLimitedOffer (base name: "timeLimitedOffer")', function() {
        // TODO: update the code to test the property timeLimitedOffer
        expect(instance).to.have.property('timeLimitedOffer');
        // expect(instance.timeLimitedOffer).to.be(expectedValueLiteral);
      });

      it('should have the property parentType (base name: "parentType")', function() {
        // TODO: update the code to test the property parentType
        expect(instance).to.have.property('parentType');
        // expect(instance.parentType).to.be(expectedValueLiteral);
      });

      it('should have the property notBestprice (base name: "notBestprice")', function() {
        // TODO: update the code to test the property notBestprice
        expect(instance).to.have.property('notBestprice');
        // expect(instance.notBestprice).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property foreignId (base name: "foreignId")', function() {
        // TODO: update the code to test the property foreignId
        expect(instance).to.have.property('foreignId');
        // expect(instance.foreignId).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property createDate (base name: "createDate")', function() {
        // TODO: update the code to test the property createDate
        expect(instance).to.have.property('createDate');
        // expect(instance.createDate).to.be(expectedValueLiteral);
      });

      it('should have the property changeDate (base name: "changeDate")', function() {
        // TODO: update the code to test the property changeDate
        expect(instance).to.have.property('changeDate');
        // expect(instance.changeDate).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property hidden (base name: "hidden")', function() {
        // TODO: update the code to test the property hidden
        expect(instance).to.have.property('hidden');
        // expect(instance.hidden).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

    });
  });

}));
