/*
 * SeminarCatalog API
 * Rest API for SeminarCatalog Administration
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@databay.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SeminarCatalogApi);
  }
}(this, function(expect, SeminarCatalogApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Country', function() {
      beforeEach(function() {
        instance = new SeminarCatalogApi.Country();
      });

      it('should create an instance of Country', function() {
        // TODO: update the code to test Country
        expect(instance).to.be.a(SeminarCatalogApi.Country);
      });

      it('should have the property syncFields (base name: "_syncFields")', function() {
        // TODO: update the code to test the property syncFields
        expect(instance).to.have.property('syncFields');
        // expect(instance.syncFields).to.be(expectedValueLiteral);
      });

      it('should have the property code (base name: "code")', function() {
        // TODO: update the code to test the property code
        expect(instance).to.have.property('code');
        // expect(instance.code).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property localName (base name: "localName")', function() {
        // TODO: update the code to test the property localName
        expect(instance).to.have.property('localName');
        // expect(instance.localName).to.be(expectedValueLiteral);
      });

      it('should have the property englishName (base name: "englishName")', function() {
        // TODO: update the code to test the property englishName
        expect(instance).to.have.property('englishName');
        // expect(instance.englishName).to.be(expectedValueLiteral);
      });

      it('should have the property isEuMember (base name: "isEuMember")', function() {
        // TODO: update the code to test the property isEuMember
        expect(instance).to.have.property('isEuMember');
        // expect(instance.isEuMember).to.be(expectedValueLiteral);
      });

      it('should have the property termsAndConditions (base name: "termsAndConditions")', function() {
        // TODO: update the code to test the property termsAndConditions
        expect(instance).to.have.property('termsAndConditions');
        // expect(instance.termsAndConditions).to.be(expectedValueLiteral);
      });

      it('should have the property privacyPolicy (base name: "privacyPolicy")', function() {
        // TODO: update the code to test the property privacyPolicy
        expect(instance).to.have.property('privacyPolicy');
        // expect(instance.privacyPolicy).to.be(expectedValueLiteral);
      });

      it('should have the property cancellationInfo (base name: "cancellationInfo")', function() {
        // TODO: update the code to test the property cancellationInfo
        expect(instance).to.have.property('cancellationInfo');
        // expect(instance.cancellationInfo).to.be(expectedValueLiteral);
      });

      it('should have the property defaultCountry (base name: "defaultCountry")', function() {
        // TODO: update the code to test the property defaultCountry
        expect(instance).to.have.property('defaultCountry');
        // expect(instance.defaultCountry).to.be(expectedValueLiteral);
      });

      it('should have the property isFavorite (base name: "isFavorite")', function() {
        // TODO: update the code to test the property isFavorite
        expect(instance).to.have.property('isFavorite');
        // expect(instance.isFavorite).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property foreignId (base name: "foreignId")', function() {
        // TODO: update the code to test the property foreignId
        expect(instance).to.have.property('foreignId');
        // expect(instance.foreignId).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property createDate (base name: "createDate")', function() {
        // TODO: update the code to test the property createDate
        expect(instance).to.have.property('createDate');
        // expect(instance.createDate).to.be(expectedValueLiteral);
      });

      it('should have the property changeDate (base name: "changeDate")', function() {
        // TODO: update the code to test the property changeDate
        expect(instance).to.have.property('changeDate');
        // expect(instance.changeDate).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property hidden (base name: "hidden")', function() {
        // TODO: update the code to test the property hidden
        expect(instance).to.have.property('hidden');
        // expect(instance.hidden).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

    });
  });

}));
