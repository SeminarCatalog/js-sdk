/*
 * SeminarCatalog API
 * Rest API for SeminarCatalog Administration
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@databay.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SeminarCatalogApi);
  }
}(this, function(expect, SeminarCatalogApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Address', function() {
      beforeEach(function() {
        instance = new SeminarCatalogApi.Address();
      });

      it('should create an instance of Address', function() {
        // TODO: update the code to test Address
        expect(instance).to.be.a(SeminarCatalogApi.Address);
      });

      it('should have the property addressType (base name: "addressType")', function() {
        // TODO: update the code to test the property addressType
        expect(instance).to.have.property('addressType');
        // expect(instance.addressType).to.be(expectedValueLiteral);
      });

      it('should have the property company (base name: "company")', function() {
        // TODO: update the code to test the property company
        expect(instance).to.have.property('company');
        // expect(instance.company).to.be(expectedValueLiteral);
      });

      it('should have the property department (base name: "department")', function() {
        // TODO: update the code to test the property department
        expect(instance).to.have.property('department');
        // expect(instance.department).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property firstname (base name: "firstname")', function() {
        // TODO: update the code to test the property firstname
        expect(instance).to.have.property('firstname');
        // expect(instance.firstname).to.be(expectedValueLiteral);
      });

      it('should have the property lastname (base name: "lastname")', function() {
        // TODO: update the code to test the property lastname
        expect(instance).to.have.property('lastname');
        // expect(instance.lastname).to.be(expectedValueLiteral);
      });

      it('should have the property degree (base name: "degree")', function() {
        // TODO: update the code to test the property degree
        expect(instance).to.have.property('degree');
        // expect(instance.degree).to.be(expectedValueLiteral);
      });

      it('should have the property customerNumber (base name: "customerNumber")', function() {
        // TODO: update the code to test the property customerNumber
        expect(instance).to.have.property('customerNumber');
        // expect(instance.customerNumber).to.be(expectedValueLiteral);
      });

      it('should have the property street (base name: "street")', function() {
        // TODO: update the code to test the property street
        expect(instance).to.have.property('street');
        // expect(instance.street).to.be(expectedValueLiteral);
      });

      it('should have the property zipcode (base name: "zipcode")', function() {
        // TODO: update the code to test the property zipcode
        expect(instance).to.have.property('zipcode');
        // expect(instance.zipcode).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property countryId (base name: "countryId")', function() {
        // TODO: update the code to test the property countryId
        expect(instance).to.have.property('countryId');
        // expect(instance.countryId).to.be(expectedValueLiteral);
      });

      it('should have the property countryCode (base name: "countryCode")', function() {
        // TODO: update the code to test the property countryCode
        expect(instance).to.have.property('countryCode');
        // expect(instance.countryCode).to.be(expectedValueLiteral);
      });

      it('should have the property phone (base name: "phone")', function() {
        // TODO: update the code to test the property phone
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      it('should have the property fax (base name: "fax")', function() {
        // TODO: update the code to test the property fax
        expect(instance).to.have.property('fax');
        // expect(instance.fax).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property invoiceEmail (base name: "invoiceEmail")', function() {
        // TODO: update the code to test the property invoiceEmail
        expect(instance).to.have.property('invoiceEmail');
        // expect(instance.invoiceEmail).to.be(expectedValueLiteral);
      });

      it('should have the property useInvoiceEmail (base name: "useInvoiceEmail")', function() {
        // TODO: update the code to test the property useInvoiceEmail
        expect(instance).to.have.property('useInvoiceEmail');
        // expect(instance.useInvoiceEmail).to.be(expectedValueLiteral);
      });

      it('should have the property extra1 (base name: "extra1")', function() {
        // TODO: update the code to test the property extra1
        expect(instance).to.have.property('extra1');
        // expect(instance.extra1).to.be(expectedValueLiteral);
      });

      it('should have the property extra2 (base name: "extra2")', function() {
        // TODO: update the code to test the property extra2
        expect(instance).to.have.property('extra2');
        // expect(instance.extra2).to.be(expectedValueLiteral);
      });

      it('should have the property orderNumber (base name: "orderNumber")', function() {
        // TODO: update the code to test the property orderNumber
        expect(instance).to.have.property('orderNumber');
        // expect(instance.orderNumber).to.be(expectedValueLiteral);
      });

      it('should have the property supplierNumber (base name: "supplierNumber")', function() {
        // TODO: update the code to test the property supplierNumber
        expect(instance).to.have.property('supplierNumber');
        // expect(instance.supplierNumber).to.be(expectedValueLiteral);
      });

      it('should have the property vatNo (base name: "vatNo")', function() {
        // TODO: update the code to test the property vatNo
        expect(instance).to.have.property('vatNo');
        // expect(instance.vatNo).to.be(expectedValueLiteral);
      });

      it('should have the property noOrderNumberNeeded (base name: "noOrderNumberNeeded")', function() {
        // TODO: update the code to test the property noOrderNumberNeeded
        expect(instance).to.have.property('noOrderNumberNeeded');
        // expect(instance.noOrderNumberNeeded).to.be(expectedValueLiteral);
      });

      it('should have the property participationDefault (base name: "participationDefault")', function() {
        // TODO: update the code to test the property participationDefault
        expect(instance).to.have.property('participationDefault');
        // expect(instance.participationDefault).to.be(expectedValueLiteral);
      });

      it('should have the property shippingDefault (base name: "shippingDefault")', function() {
        // TODO: update the code to test the property shippingDefault
        expect(instance).to.have.property('shippingDefault');
        // expect(instance.shippingDefault).to.be(expectedValueLiteral);
      });

      it('should have the property billingDefault (base name: "billingDefault")', function() {
        // TODO: update the code to test the property billingDefault
        expect(instance).to.have.property('billingDefault');
        // expect(instance.billingDefault).to.be(expectedValueLiteral);
      });

      it('should have the property syncFields (base name: "_syncFields")', function() {
        // TODO: update the code to test the property syncFields
        expect(instance).to.have.property('syncFields');
        // expect(instance.syncFields).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property foreignId (base name: "foreignId")', function() {
        // TODO: update the code to test the property foreignId
        expect(instance).to.have.property('foreignId');
        // expect(instance.foreignId).to.be(expectedValueLiteral);
      });

      it('should have the property language (base name: "language")', function() {
        // TODO: update the code to test the property language
        expect(instance).to.have.property('language');
        // expect(instance.language).to.be(expectedValueLiteral);
      });

      it('should have the property createDate (base name: "createDate")', function() {
        // TODO: update the code to test the property createDate
        expect(instance).to.have.property('createDate');
        // expect(instance.createDate).to.be(expectedValueLiteral);
      });

      it('should have the property changeDate (base name: "changeDate")', function() {
        // TODO: update the code to test the property changeDate
        expect(instance).to.have.property('changeDate');
        // expect(instance.changeDate).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property hidden (base name: "hidden")', function() {
        // TODO: update the code to test the property hidden
        expect(instance).to.have.property('hidden');
        // expect(instance.hidden).to.be(expectedValueLiteral);
      });

      it('should have the property sorting (base name: "sorting")', function() {
        // TODO: update the code to test the property sorting
        expect(instance).to.have.property('sorting');
        // expect(instance.sorting).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

    });
  });

}));
