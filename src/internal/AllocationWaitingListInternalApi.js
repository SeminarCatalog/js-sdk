/*
 * SeminarCatalog API
 * Rest API for SeminarCatalog Administration
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@databay.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 */

import {ApiClient} from "../ApiClient";
import {AllocationWaitingList} from '../model/AllocationWaitingList';
import {AllocationWaitingListPaginationResult} from '../model/AllocationWaitingListPaginationResult';

/**
* AllocationWaitingList internal service.
* @module internal/AllocationWaitingListInternalApi
* @version 1.0.0
* @internal Don't use this class directly. Use the associated class located under the api/ folder.
*/
export class AllocationWaitingListInternalApi {

    /**
    * Constructs a new AllocationWaitingListInternalApi. 
    * @alias module:internal/AllocationWaitingListInternalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::create
     * @param {module:model/AllocationWaitingList} allocationWaitingListPost 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllocationWaitingList} and HTTP response
     */
    allocationwaitinglistCreateWithHttpInfo(allocationWaitingListPost) {
      let postBody = allocationWaitingListPost;

      // verify the required parameter 'allocationWaitingListPost' is set
      if (allocationWaitingListPost === undefined || allocationWaitingListPost === null) {
        throw new Error("Missing the required parameter 'allocationWaitingListPost' when calling allocationwaitinglistCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = AllocationWaitingList;

      return this.apiClient.callApi(
        '/api/allocationwaitinglist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::create
     * @param {module:model/AllocationWaitingList} allocationWaitingListPost 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllocationWaitingList}
     */
    allocationwaitinglistCreate(allocationWaitingListPost) {
      return this.allocationwaitinglistCreateWithHttpInfo(allocationWaitingListPost)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::delete
     * @param {Number} id Numeric identifier for this resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllocationWaitingList} and HTTP response
     */
    allocationwaitinglistDeleteWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling allocationwaitinglistDelete");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = AllocationWaitingList;

      return this.apiClient.callApi(
        '/api/allocationwaitinglist/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::delete
     * @param {Number} id Numeric identifier for this resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllocationWaitingList}
     */
    allocationwaitinglistDelete(id) {
      return this.allocationwaitinglistDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::get
     * @param {Number} id Numeric identifier for this resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllocationWaitingList} and HTTP response
     */
    allocationwaitinglistGetWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling allocationwaitinglistGet");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = AllocationWaitingList;

      return this.apiClient.callApi(
        '/api/allocationwaitinglist/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::get
     * @param {Number} id Numeric identifier for this resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllocationWaitingList}
     */
    allocationwaitinglistGet(id) {
      return this.allocationwaitinglistGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllocationWaitingListPaginationResult} and HTTP response
     */
    allocationwaitinglistListWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = AllocationWaitingListPaginationResult;

      return this.apiClient.callApi(
        '/api/allocationwaitinglist', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllocationWaitingListPaginationResult}
     */
    allocationwaitinglistList() {
      return this.allocationwaitinglistListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::update
     * @param {Number} id The resource identifier
     * @param {module:model/AllocationWaitingList} allocationWaitingListPut 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllocationWaitingList} and HTTP response
     */
    allocationwaitinglistUpdateWithHttpInfo(id, allocationWaitingListPut) {
      let postBody = allocationWaitingListPut;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling allocationwaitinglistUpdate");
      }

      // verify the required parameter 'allocationWaitingListPut' is set
      if (allocationWaitingListPut === undefined || allocationWaitingListPut === null) {
        throw new Error("Missing the required parameter 'allocationWaitingListPut' when calling allocationwaitinglistUpdate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = AllocationWaitingList;

      return this.apiClient.callApi(
        '/api/allocationwaitinglist/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::update
     * @param {Number} id The resource identifier
     * @param {module:model/AllocationWaitingList} allocationWaitingListPut 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllocationWaitingList}
     */
    allocationwaitinglistUpdate(id, allocationWaitingListPut) {
      return this.allocationwaitinglistUpdateWithHttpInfo(id, allocationWaitingListPut)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
