/*
 * SeminarCatalog API
 * Rest API for SeminarCatalog Administration
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@databay.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 */

import {ApiClient} from "../ApiClient";
import {SeminarConfiguration} from '../model/SeminarConfiguration';
import {SeminarConfigurationPaginationResult} from '../model/SeminarConfigurationPaginationResult';

/**
* SeminarConfiguration internal service.
* @module internal/SeminarConfigurationInternalApi
* @version 1.0.0
* @internal Don't use this class directly. Use the associated class located under the api/ folder.
*/
export class SeminarConfigurationInternalApi {

    /**
    * Constructs a new SeminarConfigurationInternalApi. 
    * @alias module:internal/SeminarConfigurationInternalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::create
     * @param {module:model/SeminarConfiguration} seminarConfigurationPost 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SeminarConfiguration} and HTTP response
     */
    seminarconfigurationCreateWithHttpInfo(seminarConfigurationPost) {
      let postBody = seminarConfigurationPost;

      // verify the required parameter 'seminarConfigurationPost' is set
      if (seminarConfigurationPost === undefined || seminarConfigurationPost === null) {
        throw new Error("Missing the required parameter 'seminarConfigurationPost' when calling seminarconfigurationCreate");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = SeminarConfiguration;

      return this.apiClient.callApi(
        '/api/seminarconfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::create
     * @param {module:model/SeminarConfiguration} seminarConfigurationPost 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SeminarConfiguration}
     */
    seminarconfigurationCreate(seminarConfigurationPost) {
      return this.seminarconfigurationCreateWithHttpInfo(seminarConfigurationPost)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::delete
     * @param {Number} id Numeric identifier for this resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SeminarConfiguration} and HTTP response
     */
    seminarconfigurationDeleteWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seminarconfigurationDelete");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = SeminarConfiguration;

      return this.apiClient.callApi(
        '/api/seminarconfiguration/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::delete
     * @param {Number} id Numeric identifier for this resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SeminarConfiguration}
     */
    seminarconfigurationDelete(id) {
      return this.seminarconfigurationDeleteWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::get
     * @param {Number} id Numeric identifier for this resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SeminarConfiguration} and HTTP response
     */
    seminarconfigurationGetWithHttpInfo(id) {
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seminarconfigurationGet");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = SeminarConfiguration;

      return this.apiClient.callApi(
        '/api/seminarconfiguration/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::get
     * @param {Number} id Numeric identifier for this resource
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SeminarConfiguration}
     */
    seminarconfigurationGet(id) {
      return this.seminarconfigurationGetWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SeminarConfigurationPaginationResult} and HTTP response
     */
    seminarconfigurationListWithHttpInfo() {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = SeminarConfigurationPaginationResult;

      return this.apiClient.callApi(
        '/api/seminarconfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::list
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SeminarConfigurationPaginationResult}
     */
    seminarconfigurationList() {
      return this.seminarconfigurationListWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::update
     * @param {Number} id The resource identifier
     * @param {module:model/SeminarConfiguration} seminarConfigurationPut 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SeminarConfiguration} and HTTP response
     */
    seminarconfigurationUpdateWithHttpInfo(id, seminarConfigurationPut) {
      let postBody = seminarConfigurationPut;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling seminarconfigurationUpdate");
      }

      // verify the required parameter 'seminarConfigurationPut' is set
      if (seminarConfigurationPut === undefined || seminarConfigurationPut === null) {
        throw new Error("Missing the required parameter 'seminarConfigurationPut' when calling seminarconfigurationUpdate");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = SeminarConfiguration;

      return this.apiClient.callApi(
        '/api/seminarconfiguration/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * SeminarCatalog\\Rest\\Resources\\Controller\\ResourceController::update
     * @param {Number} id The resource identifier
     * @param {module:model/SeminarConfiguration} seminarConfigurationPut 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SeminarConfiguration}
     */
    seminarconfigurationUpdate(id, seminarConfigurationPut) {
      return this.seminarconfigurationUpdateWithHttpInfo(id, seminarConfigurationPut)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
